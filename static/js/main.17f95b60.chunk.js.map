{"version":3,"sources":["logo.svg","components/MovieRow.js","components/MoviePage.js","components/LoginPage.js","components/ErorPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieRow","props","state","moreText","url","this","movie","id","window","location","href","p","document","getElementById","console","log","innerHTML","overview","substring","myLi","li","length","key","alt","width","src","poster_src","title","onClick","showMore","bind","type","viewMovie","value","Component","MoviePage","top_rated","performSearch","searchTerm","setState","fetch","then","response","json","rows","movieRows","results","map","poster_path","movieRow","push","event","target","top","className","onChange","searchChangeHandler","placeholder","LoginPage","inputEmail","inputPassword","history","Form","FormGroup","Label","Input","Button","moveToSite","ErorPage","App","withRouter","path","exact","component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.17f95b60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React ,{Component}from 'react';\r\n//import $ from 'jquery';\r\nclass MovieRow extends Component {\r\n constructor(props){\r\n    super(props)\r\n    this.state={moreText : true}    \r\n  }\r\n  viewMovie(){\r\n    const url = \"https://www.themoviedb.org/movie/\"+this.props.movie.id\r\n    window.location.href = url;\r\n  }\r\n    \r\n    \r\n  showMore(){\r\n    var p = document.getElementById(\"p\"+this.props.movie.id);\r\n    var li = document.getElementById(\"link\"+this.props.movie.id);      \r\n    if (this.state.moreText === true) {      \r\n      console.log(\"showMore+\") \r\n      this.state.moreText = false      \r\n      p.innerHTML = this.props.movie.overview              \r\n    }else{            \r\n      p.innerHTML = this.props.movie.overview.substring(0,200)+\"...more\"    \r\n      console.log(\"showMore-\") \r\n      this.state.moreText = true      \r\n    }            \r\n  }\r\n\r\n  shrinkOverview(){\r\n    var p = document.getElementById(this.props.movie.id);\r\n    p.innerHTML = this.props.movie.overview.substring(0,200)    \r\n    console.log(\"shrinkOverview\");  \r\n  }\r\n\r\n  componentDidMount(){   \r\n    var overview = this.props.movie.overview.substring(0,200)\r\n    var myLi = \"link\"+this.props.movie.id;\r\n    var li = document.getElementById(myLi);\r\n    var p = document.getElementById(this.props.movie.id);\r\n    console.log(p) \r\n   if (this.props.movie.overview.length > 200) {\r\n      console.log(\"1\")      \r\n      li.innerHTML = \"...more\"      \r\n      console.log(li.innerHTML)\r\n    }else{\r\n      console.log(\"2\")\r\n       li.innerHTML = \"\"\r\n    } \r\n  }\r\n\r\n  render(){    \r\n    return <table key={this.props.movie.id}>\r\n      <tbody>\r\n        <tr>\r\n          <td>\r\n            <img alt=\"poster\" width=\"120\" src={this.props.movie.poster_src}/>\r\n          </td>\r\n\r\n          <td>\r\n            <h3>{this.props.movie.title}</h3>          \r\n            <p id={\"p\"+this.props.movie.id} onClick={this.showMore.bind(this)}>\r\n              {this.props.movie.overview.substring(0,200)}\r\n              <il id={\"link\"+this.props.movie.id} onClick={this.showMore.bind(this)} href=\"#\">a</il>                 \r\n            </p>        \r\n            <input type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View\"/>            \r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>    \r\n  }\r\n}\r\nexport default MovieRow;","import React ,{Component}from 'react';\r\n//import logo from './logo.svg';\r\nimport MovieRow from './MovieRow.js';\r\n\r\nclass MoviePage extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state={top_rated : true}\r\n    this.performSearch(\"\")\r\n  }\r\n\r\n performSearch(searchTerm){\r\n  let url;\r\n  console.log(searchTerm)\r\n  if (searchTerm == null || searchTerm==\"\") {\r\n     this.setState({top_rated: true})\r\n    url = 'https://api.themoviedb.org/3/movie/top_rated?api_key=6d33d7313e2e4565a9681b4714dd4dc7&language=en-US&page=1';\r\n  }\r\n  else{\r\n    this.setState({top_rated: false})\r\n    url = 'https://api.themoviedb.org/3/search/movie?&api_key=6d33d7313e2e4565a9681b4714dd4dc7&query='+searchTerm;\r\n  }\r\n  fetch(url)\r\n  .then(response=> response.json())\r\n  .then(rows => {\r\n    var movieRows = []\r\n    rows.results.map((movie)=> {\r\n      movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path\r\n      const movieRow = <MovieRow key={movie.id} movie={movie}/>\r\n      movieRows.push(movieRow)\r\n    })\r\n    this.setState({rows: movieRows})\r\n  });\r\n  }\r\n\r\n  searchChangeHandler(event){\r\n    const boundObject = this;\r\n    const searchTerm = event.target.value;\r\n    boundObject.performSearch(searchTerm);\r\n  }\r\n  render(){\r\n    if (this.state.top_rated == true) {\r\n     var top = \"Top Rated\"\r\n    }\r\n    else{\r\n      var top = \"\"\r\n    }    \r\n    return (\r\n      <div className=\"App\">\r\n        <table className=\"titleBar\">\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <img className=\"App-logo\" src=\"logo192.png\"/>  \r\n              </td>\r\n              <td width=\"8\"></td>\r\n              <td>\r\n                <h2>The Movie Search</h2>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <input onChange={this.searchChangeHandler.bind(this)} className=\"inputText\" placeholder=\"Enter Search term\"/>\r\n        \r\n          <h2 id=\"top\">{top}</h2>\r\n        \r\n        {this.state.rows}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MoviePage;\r\n","import React ,{Component}from 'react';\r\nimport MoviePage from './MoviePage.js';\r\nimport './LoginPage.css';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {Button , Form , FormGroup, Label, Input} from 'reactstrap';\r\n\r\nclass LoginPage extends Component {\r\n\r\n\tmoveToSite(){\r\n\t\tlet inputEmail = document.getElementById(\"inputEmail\");\r\n\t\tlet inputPassword = document.getElementById(\"inputPassword\");\r\n\t\tconsole.log(inputEmail.value);\r\n\t\tif (inputEmail.value === \"renan@gmail.com\" && inputPassword.value === '1234') {\r\n\t\t\tthis.props.history.push('/MoviePage');\r\n\t\t}else{\r\n\t\t\tthis.props.history.push('/ErorPage');\r\n\t\t}\r\n\t}\r\n    render(){\r\n      return(\r\n      \t<Form className=\"Login-form\">\r\n\t        <h1 className=\"text-center\">\r\n\t        \t<span className=\"font-weight-bold\">The Search-Movies</span>\r\n\t        </h1>\r\n\t        <h2 className=\"text-center\">Welcome </h2>\r\n\t        <FormGroup>\r\n\t        \t<Label>Email</Label>\r\n\t        \t<Input type=\"email\" placeholder=\"Email\" id=\"inputEmail\"/>\r\n\t        </FormGroup>\r\n\t        <FormGroup>\r\n\t        \t<Label>Password</Label>\r\n\t        \t<Input type=\"password\" placeholder=\"Password\" id=\"inputPassword\"/>\r\n\t        </FormGroup>\r\n\t       \t<Button className=\"btn-lg btn-dark btn-block\" onClick={this.moveToSite.bind(this)}>\r\n\t       \tLog in\r\n\t       \t</Button>\t       \t\r\n        </Form>\r\n      );\r\n  }\r\n}\r\n\r\nexport default LoginPage;\r\n","import React ,{Component}from 'react';\r\n\r\nclass ErorPage extends Component {\r\n\t\r\n    render(){\r\n      return(      \t\r\n        <h1>\r\n        \t<span className=\"font-weight-bold\">eror 404</span> \r\n        </h1>        \r\n      );\r\n  }\r\n}\r\n\r\nexport default ErorPage;\r\n","import React ,{Component}from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MoviePage from './components/MoviePage.js';\nimport LoginPage from './components/LoginPage.js';\nimport ErorPage from './components/ErorPage.js';\nimport {BrowserRouter as Router ,Switch, Route , Link ,withRouter} from 'react-router-dom';\n\n\n\nclass App extends Component {\n    render(){\n      return(\n        <Router history={withRouter}>\n          <Switch>\n            <Route path=\"/\" exact component={LoginPage}/>  \n            <Route path=\"/MoviePage\" component={MoviePage}/>\n            <Route path=\"/ErorPage\" component={ErorPage}/>\n          </Switch>\n        </Router>  \n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}