{"version":3,"sources":["logo.svg","components/MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieRow","url","this","props","movie","id","window","location","href","myP","document","getElementById","innerHTML","overview","substring","myA","a","p","console","log","length","key","alt","width","src","poster_src","title","onClick","showMore","bind","type","viewMovie","value","Component","App","state","top_rated","performSearch","searchTerm","setState","fetch","then","response","json","rows","movieRows","results","map","poster_path","movieRow","push","event","target","top","className","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gJAAAA,EAAOC,QAAU,IAA0B,kC,sICqD5BC,G,sMAhDX,IAAMC,EAAM,oCAAoCC,KAAKC,MAAMC,MAAMC,GACjEC,OAAOC,SAASC,KAAOP,I,iCAIvB,IAAIQ,EAAMP,KAAKC,MAAMC,MAAMC,GACnBK,SAASC,eAAeF,GAC9BG,UAAYV,KAAKC,MAAMC,MAAMS,W,0CAIhBX,KAAKC,MAAMC,MAAMS,SAASC,UAAU,EAAE,KAArD,IACIC,EAAM,OAAOb,KAAKC,MAAMC,MAAMC,GAC9BW,EAAIN,SAASC,eAAeI,GAC5BE,EAAIP,SAASC,eAAeT,KAAKC,MAAMC,MAAMC,IACjDa,QAAQC,IAAIF,GACTf,KAAKC,MAAMC,MAAMS,SAASO,OAAS,KACpCF,QAAQC,IAAI,KACZH,EAAEJ,UAAY,UACdM,QAAQC,IAAIH,EAAEJ,aAEdM,QAAQC,IAAI,KACXH,EAAEJ,UAAY,M,+BAKjB,OAAO,2BAAOS,IAAKnB,KAAKC,MAAMC,MAAMC,IAClC,+BACE,4BACE,4BACE,yBAAKiB,IAAI,SAASC,MAAM,MAAMC,IAAKtB,KAAKC,MAAMC,MAAMqB,cAGtD,4BACE,4BAAKvB,KAAKC,MAAMC,MAAMsB,OACtB,uBAAGrB,GAAIH,KAAKC,MAAMC,MAAMC,IACrBH,KAAKC,MAAMC,MAAMS,SAASC,UAAU,EAAE,KACvC,wBAAIT,GAAI,OAAOH,KAAKC,MAAMC,MAAMC,GAAIsB,QAASzB,KAAK0B,SAASC,KAAK3B,MAAOM,KAAK,KAA5E,MAEF,2BAAOsB,KAAK,SAASH,QAASzB,KAAK6B,UAAUF,KAAK3B,MAAO8B,MAAM,iB,GA3CpDC,cCwERC,E,YApEb,WAAY/B,GAAO,IAAD,8BAChB,4CAAMA,KACDgC,MAAM,CAACC,WAAY,GACxB,EAAKC,cAAc,IAHH,E,2EAMLC,GAAY,IACrBrC,EADoB,OAExBiB,QAAQC,IAAImB,GACM,MAAdA,GAAkC,IAAZA,GACvBpC,KAAKqC,SAAS,CAACH,WAAW,IAC3BnC,EAAM,gHAGNC,KAAKqC,SAAS,CAACH,WAAW,IAC1BnC,EAAM,6FAA6FqC,GAErGE,MAAMvC,GACLwC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GACJ,IAAIC,EAAY,GAChBD,EAAKE,QAAQC,KAAI,SAAC3C,GAChBA,EAAMqB,WAAa,kCAAoCrB,EAAM4C,YAC7D,IAAMC,EAAW,kBAAC,EAAD,CAAU5B,IAAKjB,EAAMC,GAAID,MAAOA,IACjDyC,EAAUK,KAAKD,MAEjB,EAAKV,SAAS,CAACK,KAAMC,S,0CAIHM,GAClB,IACMb,EAAaa,EAAMC,OAAOpB,MADZ9B,KAERmC,cAAcC,K,+BAG1B,GAA4B,GAAxBpC,KAAKiC,MAAMC,UACd,IAAIiB,EAAM,iBAGLA,EAAM,GAEZ,OACE,yBAAKC,UAAU,OACb,2BAAOA,UAAU,YACf,+BACE,4BACE,4BACE,yBAAKA,UAAU,WAAW9B,IAAI,iBAEhC,wBAAID,MAAM,MACV,4BACE,oDAMR,2BAAOgC,SAAUrD,KAAKsD,oBAAoB3B,KAAK3B,MAAOoD,UAAU,YAAYG,YAAY,sBAEtF,wBAAIpD,GAAG,OAAOgD,GAEfnD,KAAKiC,MAAMS,U,GA/DFX,aCOEyB,QACW,cAA7BpD,OAAOC,SAASoD,UAEe,UAA7BrD,OAAOC,SAASoD,UAEhBrD,OAAOC,SAASoD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpD,SAASC,eAAe,SD2H3C,kBAAmBoD,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.703bd58f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React ,{Component}from 'react';\r\nimport $ from 'jquery';\r\nclass MovieRow extends Component {\r\n\r\n  viewMovie(){\r\n    const url = \"https://www.themoviedb.org/movie/\"+this.props.movie.id\r\n    window.location.href = url;\r\n  }\r\n    \r\n  showMore(){    \r\n    var myP = this.props.movie.id;    \r\n    var p = document.getElementById(myP);\r\n    p.innerHTML = this.props.movie.overview    \r\n  }\r\n\r\n  componentDidMount(){   \r\n    var overview = this.props.movie.overview.substring(0,200)\r\n    var myA = \"link\"+this.props.movie.id;\r\n    var a = document.getElementById(myA);\r\n    var p = document.getElementById(this.props.movie.id);\r\n    console.log(p) \r\n   if (this.props.movie.overview.length > 200) {\r\n      console.log(\"1\")      \r\n      a.innerHTML = \"...more\"      \r\n      console.log(a.innerHTML)\r\n    }else{\r\n      console.log(\"2\")\r\n       a.innerHTML = \"\"\r\n    } \r\n  }\r\n\r\n  render(){    \r\n    return <table key={this.props.movie.id}>\r\n      <tbody>\r\n        <tr>\r\n          <td>\r\n            <img alt=\"poster\" width=\"120\" src={this.props.movie.poster_src}/>\r\n          </td>\r\n\r\n          <td>\r\n            <h3>{this.props.movie.title}</h3>\r\n            <p id={this.props.movie.id}> \r\n              {this.props.movie.overview.substring(0,200)}\r\n              <il id={\"link\"+this.props.movie.id} onClick={this.showMore.bind(this)} href=\"#\">a</il>                 \r\n            </p>\r\n            <input type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View\"/>            \r\n\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>    \r\n  }\r\n}\r\nexport default MovieRow;","import React ,{Component}from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MovieRow from './components/MovieRow.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={top_rated : true}\n    this.performSearch(\"\")\n  }\n\n performSearch(searchTerm){\n  let url;\n  console.log(searchTerm)\n  if (searchTerm == null || searchTerm==\"\") {\n     this.setState({top_rated: true})\n    url = 'https://api.themoviedb.org/3/movie/top_rated?api_key=6d33d7313e2e4565a9681b4714dd4dc7&language=en-US&page=1';\n  }\n  else{\n    this.setState({top_rated: false})\n    url = 'https://api.themoviedb.org/3/search/movie?&api_key=6d33d7313e2e4565a9681b4714dd4dc7&query='+searchTerm;\n  }\n  fetch(url)\n  .then(response=> response.json())\n  .then(rows => {\n    var movieRows = []\n    rows.results.map((movie)=> {\n      movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path\n      const movieRow = <MovieRow key={movie.id} movie={movie}/>\n      movieRows.push(movieRow)\n    })\n    this.setState({rows: movieRows})\n  });\n  }\n\n  searchChangeHandler(event){\n    const boundObject = this;\n    const searchTerm = event.target.value;\n    boundObject.performSearch(searchTerm);\n  }\n  render(){\n    if (this.state.top_rated == true) {\n     var top = \"Top Rated\"\n    }\n    else{\n      var top = \"\"\n    }    \n    return (\n      <div className=\"App\">\n        <table className=\"titleBar\">\n          <tbody>\n            <tr>\n              <td>\n                <img className=\"App-logo\" src=\"logo192.png\"/>  \n              </td>\n              <td width=\"8\"></td>\n              <td>\n                <h2>The Movie Search</h2>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <input onChange={this.searchChangeHandler.bind(this)} className=\"inputText\" placeholder=\"Enter Search term\"/>\n        \n          <h2 id=\"top\">{top}</h2>\n        \n        {this.state.rows}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}